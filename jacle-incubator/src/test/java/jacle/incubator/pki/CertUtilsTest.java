package jacle.incubator.pki;

import static org.junit.Assert.assertEquals;
import jacle.common.lang.JavaUtil;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.pkcs.PKCS10CertificationRequest;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

/**
 * Verifies various functions of {@link CertUtils}. The primary way of
 * verifying functions of this class is to compare the output of methods to
 * those of sample files generated by openssl, externally.
 * 
 * See <code>create-test-certs.sh</code> for the actions used to create the
 * sample files.
 */
public class CertUtilsTest {

    private static final Pattern WINDOWS_NEWLINE_PATTERN = Pattern.compile("\r\n");
    private static final long DAYS_365_MS = 365L*24*60*60*1000;

    @Rule
    public TemporaryFolder files = new TemporaryFolder();

    public File examplesDir = new File("src/test/resources/"+JavaUtil.I.getClassName());
    
    /**
     * Verifies that if we load a private key (originally created by
     * openssl) with {@link CertUtils#readPrivateKeyFromPem(File)} and then rewrite it
     * with {@link CertUtils#writeToPemFile(PrivateKey, File)}, the resulting file
     * matches the original.
     */
    @Test
    public void testLoadPrivateKeyAndWriteToFile() throws Exception {
        // Setup
        File originalFile = new File(examplesDir, "ca.pem.key");
        File newFile = files.newFile("ca.pem.key");

        // Execute
        PrivateKey key = CertUtils.I.readPrivateKeyFromPem(originalFile);
        CertUtils.I.writeToPemFile(key, newFile);

        // Verify
        String originalContent = FileUtils.readFileToString(originalFile, StandardCharsets.UTF_8);
        String newContent = FileUtils.readFileToString(newFile, StandardCharsets.UTF_8);
        originalContent = windowsToUnixNewlines(originalContent);
        newContent = windowsToUnixNewlines(newContent);
        assertEquals(originalContent, newContent);
    }

    /**
     * Verifies that if we load a public key (originally created by
     * openssl) with {@link CertUtils#readPublicKeyFromPem(File)} and then rewrite it
     * with {@link CertUtils#writeToPemFile(PublicKey, File)}, the resulting file
     * matches the original.
     */
    @Test
    public void testLoadPublicKeyAndWriteToFile() throws Exception {
        // Setup
        File originalFile = new File(examplesDir, "ca.pem.key.pub");
        File newFile = files.newFile("ca.pem.key.pub");

        // Execute
        PublicKey key = CertUtils.I.readPublicKeyFromPem(originalFile);
        CertUtils.I.writeToPemFile(key, newFile);

        // Verify
        String originalContent = FileUtils.readFileToString(originalFile, StandardCharsets.UTF_8);
        String newContent = FileUtils.readFileToString(newFile, StandardCharsets.UTF_8);
        originalContent = windowsToUnixNewlines(originalContent);
        newContent = windowsToUnixNewlines(newContent);
        assertEquals(originalContent, newContent);
    }

    /**
     * Verifies that if we load a CSR (originally created by openssl)
     * with {@link CertUtils#readSigningRequestFromPem(File)} and then rewrite it with
     * {@link CertUtils#writeToPemFile(PKCS10CertificationRequest, File)}, the
     * resulting file matches the original.
     */
    @Test
    public void testLoadSigningRequestAndWriteToFile() throws Exception {
        // Setup
        File originalFile = new File(examplesDir, "child.csr");
        File newFile = files.newFile("child.csr");

        // Execute
        PKCS10CertificationRequest csr = CertUtils.I.readSigningRequestFromPem(originalFile);
        CertUtils.I.writeToPemFile(csr, newFile);

        // Verify
        String originalContent = FileUtils.readFileToString(originalFile, StandardCharsets.UTF_8);
        String newContent = FileUtils.readFileToString(newFile, StandardCharsets.UTF_8);
        originalContent = windowsToUnixNewlines(originalContent);
        newContent = windowsToUnixNewlines(newContent);
        assertEquals(originalContent, newContent);
    }

    /**
     * Verifies that if we load the CSR, CSR owner's public key, and
     * CA private key, and use those to sign the CSR (generate a new cert), the
     * resulting cert matches the one created by openssl in the same manner.
     */
    @Test
    public void testCreateCertFromCSR() throws Exception {
        // Setup
        File originalFile = new File(examplesDir, "child.der.crt");
        File newFile = files.newFile("child.der.crt");
        PKCS10CertificationRequest request = CertUtils.I.readSigningRequestFromPem(new File(examplesDir, "child.csr"));
        PublicKey publicKey = CertUtils.I.readPublicKeyFromPem(new File(examplesDir, "child.pem.key.pub"));
        X509CertificateHolder caCert = CertUtils.I.readCertificateFromPem(new File(examplesDir, "ca.pem.crt"));
        PrivateKey caKey = CertUtils.I.readPrivateKeyFromPem(new File(examplesDir, "ca.pem.key"));
        // NOTE: These dates need to match the dates set by openssl in the original file
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("zulu"));
        cal.set(2016, 4, 22, 22, 21, 29); 
        Date begin = cal.getTime();
        Date end = new Date(begin.getTime() + DAYS_365_MS);
        
        // Execute
        X509Certificate cert = CertUtils.I.createCertFromCSR()
                .setCaInfo(caCert.getSubject(), caKey)
                .setPeriod(new Date(), new Date())
                .setRequestInfo(request, publicKey)
                .setPeriod(begin, end)
                .setSerial(2).create();
        CertUtils.I.writeToDerFile(cert, newFile);
        
        
        // Verify
        byte[] originalContent  = FileUtils.readFileToByteArray(originalFile);
        byte[] newContent = FileUtils.readFileToByteArray(newFile);
        Assert.assertArrayEquals(originalContent, newContent);
    }
    
    private static String windowsToUnixNewlines(String text) {
        return WINDOWS_NEWLINE_PATTERN.matcher(text).replaceAll("\n");
    }
}
